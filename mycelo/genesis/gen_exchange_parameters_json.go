// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package genesis

import (
	"encoding/json"
	"math/big"

	"github.com/celo-org/celo-blockchain/common/decimal/bigintstr"
	"github.com/celo-org/celo-blockchain/common/decimal/fixed"
)

var _ = (*ExchangeParametersMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExchangeParameters) MarshalJSON() ([]byte, error) {
	type ExchangeParameters struct {
		Frozen                      bool                 `json:"frozen"`
		Spread                      *fixed.Fixed         `json:"spread"`
		ReserveFraction             *fixed.Fixed         `json:"reserveFraction"`
		UpdateFrequency             uint64               `json:"updateFrequency"`
		MinimumReports              uint64               `json:"minimumReports"`
		MinSupplyForStableBucketCap *bigintstr.BigIntStr `json:"minSupplyForStableBucketCap"`
		StableBucketFractionCap     *fixed.Fixed         `json:"stableBucketFractionCap"`
	}
	var enc ExchangeParameters
	enc.Frozen = e.Frozen
	enc.Spread = e.Spread
	enc.ReserveFraction = e.ReserveFraction
	enc.UpdateFrequency = e.UpdateFrequency
	enc.MinimumReports = e.MinimumReports
	enc.MinSupplyForStableBucketCap = (*bigintstr.BigIntStr)(e.MinSupplyForStableBucketCap)
	enc.StableBucketFractionCap = e.StableBucketFractionCap
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExchangeParameters) UnmarshalJSON(input []byte) error {
	type ExchangeParameters struct {
		Frozen                      *bool                `json:"frozen"`
		Spread                      *fixed.Fixed         `json:"spread"`
		ReserveFraction             *fixed.Fixed         `json:"reserveFraction"`
		UpdateFrequency             *uint64              `json:"updateFrequency"`
		MinimumReports              *uint64              `json:"minimumReports"`
		MinSupplyForStableBucketCap *bigintstr.BigIntStr `json:"minSupplyForStableBucketCap"`
		StableBucketFractionCap     *fixed.Fixed         `json:"stableBucketFractionCap"`
	}
	var dec ExchangeParameters
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Frozen != nil {
		e.Frozen = *dec.Frozen
	}
	if dec.Spread != nil {
		e.Spread = dec.Spread
	}
	if dec.ReserveFraction != nil {
		e.ReserveFraction = dec.ReserveFraction
	}
	if dec.UpdateFrequency != nil {
		e.UpdateFrequency = *dec.UpdateFrequency
	}
	if dec.MinimumReports != nil {
		e.MinimumReports = *dec.MinimumReports
	}
	if dec.MinSupplyForStableBucketCap != nil {
		e.MinSupplyForStableBucketCap = (*big.Int)(dec.MinSupplyForStableBucketCap)
	}
	if dec.StableBucketFractionCap != nil {
		e.StableBucketFractionCap = dec.StableBucketFractionCap
	}
	return nil
}
