e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    1) // Copyright 2017 The go-ethereum Authors
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    2) // This file is part of the go-ethereum library.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    3) //
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    4) // The go-ethereum library is free software: you can redistribute it and/or modify
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    5) // it under the terms of the GNU Lesser General Public License as published by
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    6) // the Free Software Foundation, either version 3 of the License, or
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    7) // (at your option) any later version.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    8) //
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700    9) // The go-ethereum library is distributed in the hope that it will be useful,
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   10) // but WITHOUT ANY WARRANTY; without even the implied warranty of
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   11) // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   12) // GNU Lesser General Public License for more details.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   13) //
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   14) // You should have received a copy of the GNU Lesser General Public License
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   15) // along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   16) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   17) package istanbul
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   18) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   19) import (
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   20) 	"crypto/ecdsa"
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300   21) 	"errors"
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   22) 	"fmt"
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   23) 	"io"
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   24) 	"math/big"
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   25) 	"time"
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   26) 
68e2ab747b (Joshua Gutow      2021-02-18 13:15:17 -0500   27) 	"github.com/celo-org/celo-blockchain/accounts"
68e2ab747b (Joshua Gutow      2021-02-18 13:15:17 -0500   28) 	"github.com/celo-org/celo-blockchain/common"
68e2ab747b (Joshua Gutow      2021-02-18 13:15:17 -0500   29) 	"github.com/celo-org/celo-blockchain/core/types"
68e2ab747b (Joshua Gutow      2021-02-18 13:15:17 -0500   30) 	"github.com/celo-org/celo-blockchain/crypto"
68e2ab747b (Joshua Gutow      2021-02-18 13:15:17 -0500   31) 	blscrypto "github.com/celo-org/celo-blockchain/crypto/bls"
68e2ab747b (Joshua Gutow      2021-02-18 13:15:17 -0500   32) 	"github.com/celo-org/celo-blockchain/p2p/enode"
68e2ab747b (Joshua Gutow      2021-02-18 13:15:17 -0500   33) 	"github.com/celo-org/celo-blockchain/rlp"
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   34) )
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   35) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   36) // Decrypt is a decrypt callback function to request an ECIES ciphertext to be
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   37) // decrypted
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   38) type DecryptFn func(accounts.Account, []byte, []byte, []byte) ([]byte, error)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   39) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   40) // SignerFn is a signer callback function to request a header to be signed by a
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   41) // backing account.
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   42) type SignerFn func(accounts.Account, string, []byte) ([]byte, error)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   43) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   44) // BLSSignerFn is a signer callback function to request a message and extra data to be signed by a
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   45) // backing account using BLS with a direct or composite hasher
649dc186ac (Kobi Gurkan       2021-01-18 21:29:26 +0200   46) type BLSSignerFn func(accounts.Account, []byte, []byte, bool, bool) (blscrypto.SerializedSignature, error)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700   47) 
8ec69a83aa (Kevin Jue         2021-01-07 11:46:07 -0800   48) // HashSignerFn is a signer callback function to request a hash to be signed by a
8ec69a83aa (Kevin Jue         2021-01-07 11:46:07 -0800   49) // backing account.
8ec69a83aa (Kevin Jue         2021-01-07 11:46:07 -0800   50) type HashSignerFn func(accounts.Account, []byte) ([]byte, error)
8ec69a83aa (Kevin Jue         2021-01-07 11:46:07 -0800   51) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   52) // Proposal supports retrieving height and serialized block to be used during Istanbul consensus.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   53) type Proposal interface {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   54) 	// Number retrieves the sequence number of this proposal.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   55) 	Number() *big.Int
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   56) 
1601c0b4f0 (Asa Oines         2019-11-15 19:09:58 -0800   57) 	Header() *types.Header
1601c0b4f0 (Asa Oines         2019-11-15 19:09:58 -0800   58) 
cd8c601206 (Mariano Cortesi   2019-11-20 14:33:11 -0800   59) 	// Hash retrieves the hash of this block
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   60) 	Hash() common.Hash
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   61) 
cd8c601206 (Mariano Cortesi   2019-11-20 14:33:11 -0800   62) 	// ParentHash retrieves the hash of this block's parent
cd8c601206 (Mariano Cortesi   2019-11-20 14:33:11 -0800   63) 	ParentHash() common.Hash
cd8c601206 (Mariano Cortesi   2019-11-20 14:33:11 -0800   64) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   65) 	EncodeRLP(w io.Writer) error
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   66) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   67) 	DecodeRLP(s *rlp.Stream) error
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   68) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   69) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300   70) // ## Request ##############################################################
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300   71) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   72) type Request struct {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   73) 	Proposal Proposal
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   74) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   75) 
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   76) // EncodeRLP serializes b into the Ethereum RLP format.
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   77) func (b *Request) EncodeRLP(w io.Writer) error {
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   78) 	return rlp.Encode(w, []interface{}{b.Proposal})
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   79) }
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   80) 
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   81) // DecodeRLP implements rlp.Decoder, and load the consensus fields from a RLP stream.
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   82) func (b *Request) DecodeRLP(s *rlp.Stream) error {
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   83) 	var request struct {
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   84) 		Proposal *types.Block
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   85) 	}
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   86) 
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   87) 	if err := s.Decode(&request); err != nil {
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   88) 		return err
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   89) 	}
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   90) 
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   91) 	b.Proposal = request.Proposal
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   92) 	return nil
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   93) }
530458a3ef (Mariano Cortesi   2019-12-03 15:32:04 -0300   94) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300   95) // ## View ##############################################################
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300   96) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   97) // View includes a round number and a sequence number.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   98) // Sequence is the block number we'd like to commit.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700   99) // Each round has a number and is composed by 3 steps: preprepare, prepare and commit.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  100) //
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  101) // If the given block is not accepted by validators, a round change will occur
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  102) // and the validators start a new round with round+1.
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  103) type View struct {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  104) 	Round    *big.Int
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  105) 	Sequence *big.Int
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  106) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  107) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  108) func (v *View) String() string {
166e4bd811 (Tim Moreton       2020-01-07 20:28:21 -0800  109) 	if v.Round == nil || v.Sequence == nil {
166e4bd811 (Tim Moreton       2020-01-07 20:28:21 -0800  110) 		return "Invalid"
166e4bd811 (Tim Moreton       2020-01-07 20:28:21 -0800  111) 	}
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  112) 	return fmt.Sprintf("{Round: %d, Sequence: %d}", v.Round.Uint64(), v.Sequence.Uint64())
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  113) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  114) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  115) // Cmp compares v and y and returns:
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  116) //   -1 if v <  y
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  117) //    0 if v == y
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  118) //   +1 if v >  y
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  119) func (v *View) Cmp(y *View) int {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  120) 	if v.Sequence.Cmp(y.Sequence) != 0 {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  121) 		return v.Sequence.Cmp(y.Sequence)
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  122) 	}
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  123) 	if v.Round.Cmp(y.Round) != 0 {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  124) 		return v.Round.Cmp(y.Round)
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  125) 	}
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  126) 	return 0
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  127) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  128) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  129) // ## RoundChangeCertificate ##############################################################
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  130) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  131) type RoundChangeCertificate struct {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  132) 	RoundChangeMessages []Message
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  133) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  134) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  135) func (b *RoundChangeCertificate) IsEmpty() bool {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  136) 	return len(b.RoundChangeMessages) == 0
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  137) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  138) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  139) // ## Preprepare ##############################################################
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  140) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  141) // NewPreprepareMessage constructs a Message instance with the given sender and
968e504edd (piersy            2021-07-12 12:38:02 +0100  142) // prePrepare. Both the prePrepare instance and the serialized bytes of
968e504edd (piersy            2021-07-12 12:38:02 +0100  143) // prePrepare are part of the returned Message.
968e504edd (piersy            2021-07-12 12:38:02 +0100  144) func NewPreprepareMessage(prePrepare *Preprepare, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  145) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  146) 		Address:    sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  147) 		Code:       MsgPreprepare,
968e504edd (piersy            2021-07-12 12:38:02 +0100  148) 		prePrepare: prePrepare,
968e504edd (piersy            2021-07-12 12:38:02 +0100  149) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  150) 	setMessageBytes(message, prePrepare)
968e504edd (piersy            2021-07-12 12:38:02 +0100  151) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100  152) }
968e504edd (piersy            2021-07-12 12:38:02 +0100  153) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  154) type Preprepare struct {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  155) 	View                   *View
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  156) 	Proposal               Proposal
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  157) 	RoundChangeCertificate RoundChangeCertificate
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  158) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  159) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  160) type PreprepareData struct {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  161) 	View                   *View
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  162) 	Proposal               *types.Block
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  163) 	RoundChangeCertificate RoundChangeCertificate
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  164) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  165) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  166) type PreprepareSummary struct {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  167) 	View                          *View            `json:"view"`
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  168) 	ProposalHash                  common.Hash      `json:"proposalHash"`
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  169) 	RoundChangeCertificateSenders []common.Address `json:"roundChangeCertificateSenders"`
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  170) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  171) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  172) func (pp *Preprepare) HasRoundChangeCertificate() bool {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  173) 	return !pp.RoundChangeCertificate.IsEmpty()
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  174) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  175) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  176) func (pp *Preprepare) AsData() *PreprepareData {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  177) 	return &PreprepareData{
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  178) 		View:                   pp.View,
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  179) 		Proposal:               pp.Proposal.(*types.Block),
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  180) 		RoundChangeCertificate: pp.RoundChangeCertificate,
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  181) 	}
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  182) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  183) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  184) func (pp *Preprepare) Summary() *PreprepareSummary {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  185) 	return &PreprepareSummary{
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  186) 		View:                          pp.View,
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  187) 		ProposalHash:                  pp.Proposal.Hash(),
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  188) 		RoundChangeCertificateSenders: MapMessagesToSenders(pp.RoundChangeCertificate.RoundChangeMessages),
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  189) 	}
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  190) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  191) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  192) // RLP Encoding ---------------------------------------------------------------
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  193) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  194) // EncodeRLP serializes b into the Ethereum RLP format.
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  195) func (pp *Preprepare) EncodeRLP(w io.Writer) error {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  196) 	return rlp.Encode(w, pp.AsData())
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  197) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  198) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  199) // DecodeRLP implements rlp.Decoder, and load the consensus fields from a RLP stream.
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  200) func (pp *Preprepare) DecodeRLP(s *rlp.Stream) error {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  201) 	var data PreprepareData
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  202) 	if err := s.Decode(&data); err != nil {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  203) 		return err
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  204) 	}
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  205) 	pp.View, pp.Proposal, pp.RoundChangeCertificate = data.View, data.Proposal, data.RoundChangeCertificate
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  206) 	return nil
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  207) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  208) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  209) // ## PreparedCertificate #####################################################
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  210) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  211) type PreparedCertificate struct {
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  212) 	Proposal        Proposal
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  213) 	PrepareMessages []Message
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  214) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  215) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  216) type PreparedCertificateData struct {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  217) 	Proposal                *types.Block
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  218) 	PrepareOrCommitMessages []Message
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  219) }
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  220) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  221) type PreparedCertificateSummary struct {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  222) 	ProposalHash   common.Hash      `json:"proposalHash"`
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  223) 	PrepareSenders []common.Address `json:"prepareSenders"`
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  224) 	CommitSenders  []common.Address `json:"commitSenders"`
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  225) }
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  226) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  227) func EmptyPreparedCertificate() PreparedCertificate {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  228) 	emptyHeader := &types.Header{
16e1c70f36 (Alec Schaefer     2020-04-01 02:40:51 -0400  229) 		Number:  big.NewInt(0),
16e1c70f36 (Alec Schaefer     2020-04-01 02:40:51 -0400  230) 		GasUsed: 0,
16e1c70f36 (Alec Schaefer     2020-04-01 02:40:51 -0400  231) 		Time:    0,
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  232) 	}
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  233) 	block := &types.Block{}
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  234) 	block = block.WithRandomness(&types.EmptyRandomness)
bb6b17b2ac (Kobi Gurkan       2020-01-29 08:40:40 +0200  235) 	block = block.WithEpochSnarkData(&types.EmptyEpochSnarkData)
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  236) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  237) 	return PreparedCertificate{
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  238) //<<<<<<< HEAD
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  239) 		Proposal:        block.WithSeal(emptyHeader),
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  240) 		PrepareMessages: []Message{},
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  241) /*=======
342c354ae2 (Tong Wang         2021-05-19 20:11:16 +0800  242) 		Proposal:                block.WithHeader(emptyHeader),
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  243) 		PrepareOrCommitMessages: []Message{},
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  244) >>>>>>> master*/
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  245) 	}
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  246) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  247) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  248) func (pc *PreparedCertificate) IsEmpty() bool {
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  249) 	return len(pc.PrepareMessages) == 0
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  250) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  251) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  252) func (pc *PreparedCertificate) AsData() *PreparedCertificateData {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  253) 	return &PreparedCertificateData{
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  254) 		Proposal:                pc.Proposal.(*types.Block),
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  255) 		PrepareOrCommitMessages: pc.PrepareMessages,
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  256) 	}
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  257) }
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  258) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  259) func (pc *PreparedCertificate) Summary() *PreparedCertificateSummary {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  260) 	var prepareSenders, commitSenders []common.Address
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  261) 	for _, msg := range pc.PrepareMessages {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  262) 		if msg.Code == MsgPrepare {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  263) 			prepareSenders = append(prepareSenders, msg.Address)
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  264) 		} else {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  265) 			commitSenders = append(commitSenders, msg.Address)
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  266) 		}
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  267) 	}
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  268) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  269) 	return &PreparedCertificateSummary{
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  270) 		ProposalHash:   pc.Proposal.Hash(),
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  271) 		PrepareSenders: prepareSenders,
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  272) 		CommitSenders:  commitSenders,
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  273) 	}
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  274) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  275) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  276) // RLP Encoding ---------------------------------------------------------------
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  277) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  278) // EncodeRLP serializes b into the Ethereum RLP format.
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  279) func (pc *PreparedCertificate) EncodeRLP(w io.Writer) error {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  280) 	return rlp.Encode(w, pc.AsData())
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  281) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  282) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  283) // DecodeRLP implements rlp.Decoder, and load the consensus fields from a RLP stream.
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  284) func (pc *PreparedCertificate) DecodeRLP(s *rlp.Stream) error {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  285) 	var data PreparedCertificateData
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  286) 	if err := s.Decode(&data); err != nil {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  287) 		return err
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  288) 	}
c577b85512 (Piers Powlesland  2021-05-18 19:04:10 +0100  289) 	pc.PrepareMessages, pc.Proposal = data.PrepareOrCommitMessages, data.Proposal
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  290) 	return nil
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  291) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  292) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  293) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  294) // ## RoundChange #############################################################
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  295) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  296) // NewRoundChangeMessage constructs a Message instance with the given sender and
968e504edd (piersy            2021-07-12 12:38:02 +0100  297) // roundChange. Both the roundChange instance and the serialized bytes of
968e504edd (piersy            2021-07-12 12:38:02 +0100  298) // roundChange are part of the returned Message.
968e504edd (piersy            2021-07-12 12:38:02 +0100  299) func NewRoundChangeMessage(roundChange *RoundChange, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  300) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  301) 		Address:     sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  302) 		Code:        MsgRoundChange,
968e504edd (piersy            2021-07-12 12:38:02 +0100  303) 		roundChange: roundChange,
968e504edd (piersy            2021-07-12 12:38:02 +0100  304) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  305) 	setMessageBytes(message, roundChange)
968e504edd (piersy            2021-07-12 12:38:02 +0100  306) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100  307) }
968e504edd (piersy            2021-07-12 12:38:02 +0100  308) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  309) type RoundChange struct {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  310) 	View                *View
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  311) 	PreparedCertificate PreparedCertificate
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  312) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  313) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  314) func (b *RoundChange) HasPreparedCertificate() bool {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  315) 	return !b.PreparedCertificate.IsEmpty()
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  316) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  317) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  318) // EncodeRLP serializes b into the Ethereum RLP format.
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  319) func (b *RoundChange) EncodeRLP(w io.Writer) error {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  320) 	return rlp.Encode(w, []interface{}{b.View, &b.PreparedCertificate})
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  321) }
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  322) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  323) // DecodeRLP implements rlp.Decoder, and load the consensus fields from a RLP stream.
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  324) func (b *RoundChange) DecodeRLP(s *rlp.Stream) error {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  325) 	var roundChange struct {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  326) 		View                *View
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  327) 		PreparedCertificate PreparedCertificate
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  328) 	}
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  329) 
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  330) 	if err := s.Decode(&roundChange); err != nil {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  331) 		return err
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  332) 	}
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  333) 	b.View, b.PreparedCertificate = roundChange.View, roundChange.PreparedCertificate
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  334) 	return nil
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  335) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  336) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  337) // ## Subject #################################################################
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  338) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  339) // NewPrepareMessage constructs a Message instance with the given sender and
968e504edd (piersy            2021-07-12 12:38:02 +0100  340) // subject. Both the subject instance and the serialized bytes of subject are
968e504edd (piersy            2021-07-12 12:38:02 +0100  341) // part of the returned Message.
968e504edd (piersy            2021-07-12 12:38:02 +0100  342) func NewPrepareMessage(subject *Subject, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  343) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  344) 		Address: sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  345) 		Code:    MsgPrepare,
968e504edd (piersy            2021-07-12 12:38:02 +0100  346) 		prepare: subject,
968e504edd (piersy            2021-07-12 12:38:02 +0100  347) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  348) 	setMessageBytes(message, subject)
968e504edd (piersy            2021-07-12 12:38:02 +0100  349) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100  350) }
968e504edd (piersy            2021-07-12 12:38:02 +0100  351) 
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  352) type Subject struct {
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  353) 	View   *View
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  354) 	Digest common.Hash
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  355) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  356) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  357) func (s *Subject) String() string {
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  358) 	return fmt.Sprintf("{View: %v, Digest: %v}", s.View, s.Digest.String())
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  359) }
e75fd17fc1 (Nam Chu Hoai      2019-03-25 19:21:32 -0700  360) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  361) // ## CommittedSubject #################################################################
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  362) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  363) // NewCommitMessage constructs a Message instance with the given sender and
968e504edd (piersy            2021-07-12 12:38:02 +0100  364) // commit. Both the commit instance and the serialized bytes of commit are
968e504edd (piersy            2021-07-12 12:38:02 +0100  365) // part of the returned Message.
968e504edd (piersy            2021-07-12 12:38:02 +0100  366) func NewCommitMessage(commit *CommittedSubject, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  367) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  368) 		Address:          sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  369) 		Code:             MsgCommit,
968e504edd (piersy            2021-07-12 12:38:02 +0100  370) 		committedSubject: commit,
968e504edd (piersy            2021-07-12 12:38:02 +0100  371) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  372) 	setMessageBytes(message, commit)
968e504edd (piersy            2021-07-12 12:38:02 +0100  373) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100  374) }
968e504edd (piersy            2021-07-12 12:38:02 +0100  375) 
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  376) type CommittedSubject struct {
bb6b17b2ac (Kobi Gurkan       2020-01-29 08:40:40 +0200  377) 	Subject               *Subject
bb6b17b2ac (Kobi Gurkan       2020-01-29 08:40:40 +0200  378) 	CommittedSeal         []byte
bb6b17b2ac (Kobi Gurkan       2020-01-29 08:40:40 +0200  379) 	EpochValidatorSetSeal []byte
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  380) 	// Cahed result of validating the committed seal
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  381) 	committedSealValid bool
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  382) 	// Cahed result of validating the epoch seal
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  383) 	epochSealValid bool
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  384) }
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  385) 
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  386) // CommittedSealVerified returns true if the committed seal is valid, and false if
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  387) // the committed seal has not yet been validated.
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  388) func (c *CommittedSubject) CommittedSealVerified() bool {
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  389) 	return c.committedSealValid
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  390) }
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  391) 
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  392) // SetCommittedSealVerified marks this committed subject as having a valid
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  393) // committed seal.
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  394) func (c *CommittedSubject) SetCommittedSealVerified() {
6408467ecc (Piers Powlesland  2021-05-11 18:49:34 +0100  395) 	c.committedSealValid = true
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  396) }
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  397) 
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  398) // CommittedSealValid returns true if the committed seal is valid, and false if
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  399) // the committed seal has not yet been validated.
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  400) func (c *CommittedSubject) EpochSealVerified() bool {
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  401) 	return c.epochSealValid
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  402) }
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  403) 
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  404) // SetEpochSealVerified marks this committed subject as having a valid
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  405) // committed seal.
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  406) func (c *CommittedSubject) SetEpochSealVerified() {
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  407) 	c.epochSealValid = true
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  408) }
50588733e5 (Piers Powlesland  2021-05-18 18:48:52 +0100  409) 
5dee1f1103 (Mariano Cortesi   2020-01-09 20:50:25 -0300  410) // ## ForwardMessage #################################################################
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  411) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  412) // NewForwardMessage constructs a Message instance with the given sender and
968e504edd (piersy            2021-07-12 12:38:02 +0100  413) // forwardMessage. Both the forwardMessage instance and the serialized bytes of
968e504edd (piersy            2021-07-12 12:38:02 +0100  414) // fowardMessage are part of the returned Message.
968e504edd (piersy            2021-07-12 12:38:02 +0100  415) func NewForwardMessage(fowardMessage *ForwardMessage, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  416) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  417) 		Address:        sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  418) 		Code:           FwdMsg,
968e504edd (piersy            2021-07-12 12:38:02 +0100  419) 		forwardMessage: fowardMessage,
968e504edd (piersy            2021-07-12 12:38:02 +0100  420) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  421) 	setMessageBytes(message, fowardMessage)
968e504edd (piersy            2021-07-12 12:38:02 +0100  422) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100  423) }
968e504edd (piersy            2021-07-12 12:38:02 +0100  424) 
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  425) type ForwardMessage struct {
c82411259a (Trevor Porter     2020-03-31 05:18:45 +0100  426) 	Code          uint64
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  427) 	Msg           []byte
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  428) 	DestAddresses []common.Address
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  429) }
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  430) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  431) // ===============================================================
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  432) //
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  433) // define the IstanbulQueryEnode message format, the QueryEnodeMsgCache entries, the queryEnode send function (both the gossip version and the "retrieve from cache" version), and the announce get function
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  434) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  435) //<<<<<<< HEAD
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  436) //=======
968e504edd (piersy            2021-07-12 12:38:02 +0100  437) // NewQueryEnodeMessage constructs a Message instance with the given sender and
968e504edd (piersy            2021-07-12 12:38:02 +0100  438) // queryEnode. Both the queryEnode instance and the serialized bytes of
968e504edd (piersy            2021-07-12 12:38:02 +0100  439) // queryEnode are part of the returned Message.
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  440) /*func NewQueryEnodeMessage(queryEnode *QueryEnodeData, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  441) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  442) 		Address:    sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  443) 		Code:       QueryEnodeMsg,
968e504edd (piersy            2021-07-12 12:38:02 +0100  444) 		queryEnode: queryEnode,
968e504edd (piersy            2021-07-12 12:38:02 +0100  445) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  446) 	setMessageBytes(message, queryEnode)
968e504edd (piersy            2021-07-12 12:38:02 +0100  447) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100  448) }
968e504edd (piersy            2021-07-12 12:38:02 +0100  449) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  450) >>>>>>> master*/
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  451) type EncryptedEnodeURL struct {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  452) 	DestAddress       common.Address
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  453) 	EncryptedEnodeURL []byte
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  454) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  455) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  456) func (ee *EncryptedEnodeURL) String() string {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  457) 	return fmt.Sprintf("{DestAddress: %s, EncryptedEnodeURL length: %d}", ee.DestAddress.String(), len(ee.EncryptedEnodeURL))
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  458) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  459) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  460) type QueryEnodeData struct {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  461) 	EncryptedEnodeURLs []*EncryptedEnodeURL
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  462) 	Version            uint
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  463) 	// The timestamp of the node when the message is generated.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  464) 	// This results in a new hash for a newly generated message so it gets regossiped by other nodes
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  465) 	Timestamp uint
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  466) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  467) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  468) func (qed *QueryEnodeData) String() string {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  469) 	return fmt.Sprintf("{Version: %v, Timestamp: %v, EncryptedEnodeURLs: %v}", qed.Version, qed.Timestamp, qed.EncryptedEnodeURLs)
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  470) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  471) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  472) /*<<<<<<< HEAD
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  473) =======
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  474) // HasDuplicates returns true if there are duplicate destination addresses in the query, and the first
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  475) // duplicate's destination address.
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  476) func (qed *QueryEnodeData) HasDuplicates() (bool, common.Address) {
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  477) 	var encounteredAddresses = make(map[common.Address]bool)
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  478) 	for _, encEnodeURL := range qed.EncryptedEnodeURLs {
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  479) 		if encounteredAddresses[encEnodeURL.DestAddress] {
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  480) 			return true, encEnodeURL.DestAddress
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  481) 		}
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  482) 
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  483) 		encounteredAddresses[encEnodeURL.DestAddress] = true
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  484) 	}
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  485) 	return false, common.Address{}
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  486) }
638d2f4fce (hbandura          2022-02-17 03:49:43 -0300  487) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  488) >>>>>>> master*/
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  489) // ==============================================
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  490) //
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  491) // define the functions that needs to be provided for rlp Encoder/Decoder.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  492) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  493) // EncodeRLP serializes ar into the Ethereum RLP format.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  494) func (ee *EncryptedEnodeURL) EncodeRLP(w io.Writer) error {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  495) 	return rlp.Encode(w, []interface{}{ee.DestAddress, ee.EncryptedEnodeURL})
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  496) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  497) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  498) // DecodeRLP implements rlp.Decoder, and load the ar fields from a RLP stream.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  499) func (ee *EncryptedEnodeURL) DecodeRLP(s *rlp.Stream) error {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  500) 	var msg struct {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  501) 		DestAddress       common.Address
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  502) 		EncryptedEnodeURL []byte
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  503) 	}
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  504) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  505) 	if err := s.Decode(&msg); err != nil {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  506) 		return err
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  507) 	}
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  508) 	ee.DestAddress, ee.EncryptedEnodeURL = msg.DestAddress, msg.EncryptedEnodeURL
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  509) 	return nil
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  510) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  511) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  512) // EncodeRLP serializes ad into the Ethereum RLP format.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  513) func (qed *QueryEnodeData) EncodeRLP(w io.Writer) error {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  514) 	return rlp.Encode(w, []interface{}{qed.EncryptedEnodeURLs, qed.Version, qed.Timestamp})
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  515) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  516) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  517) // DecodeRLP implements rlp.Decoder, and load the ad fields from a RLP stream.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  518) func (qed *QueryEnodeData) DecodeRLP(s *rlp.Stream) error {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  519) 	var msg struct {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  520) 		EncryptedEnodeURLs []*EncryptedEnodeURL
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  521) 		Version            uint
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  522) 		Timestamp          uint
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  523) 	}
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  524) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  525) 	if err := s.Decode(&msg); err != nil {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  526) 		return err
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  527) 	}
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  528) 	qed.EncryptedEnodeURLs, qed.Version, qed.Timestamp = msg.EncryptedEnodeURLs, msg.Version, msg.Timestamp
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  529) 	return nil
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  530) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  531) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  532) // ## Consensus Message codes ##########################################################
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  533) 
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  534) const (
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  535) 	MsgPreprepare uint64 = iota
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  536) 	MsgPrepare
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  537) 	MsgCommit
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  538) 	MsgRoundChange
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  539) )
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  540) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  541) // Message is a wrapper used for all istanbul communication. It encapsulates
968e504edd (piersy            2021-07-12 12:38:02 +0100  542) // the sender's address, a code that indicates the type of the wrapped message
968e504edd (piersy            2021-07-12 12:38:02 +0100  543) // and a signature. Message instances also hold a deserialised instance of the
968e504edd (piersy            2021-07-12 12:38:02 +0100  544) // inner message which can be retrieved by calling the corresponding function
968e504edd (piersy            2021-07-12 12:38:02 +0100  545) // (Commit(), Preprepare() ... etc).
968e504edd (piersy            2021-07-12 12:38:02 +0100  546) //
968e504edd (piersy            2021-07-12 12:38:02 +0100  547) // Messages should be initialised either through the use of one of the
968e504edd (piersy            2021-07-12 12:38:02 +0100  548) // NewXXXMessage constructors or by calling FromPayload on an empty Message
968e504edd (piersy            2021-07-12 12:38:02 +0100  549) // instance, these mechanisms ensure that the produced Message instances will
968e504edd (piersy            2021-07-12 12:38:02 +0100  550) // contain the deserialised inner message instance and the serialised bytes of
968e504edd (piersy            2021-07-12 12:38:02 +0100  551) // the inner message.
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  552) type Message struct {
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  553) 	Code      uint64
968e504edd (piersy            2021-07-12 12:38:02 +0100  554) 	Msg       []byte         // The serialised bytes of the innner message.
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  555) 	Address   common.Address // The sender address
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  556) 	Signature []byte         // Signature of the Message using the private key associated with the "Address" field
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  557) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  558) <<<<<<< HEAD
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  559) 	// The below fields are not serializable since they are private, they are
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  560) 	// set when calling Message.FromPayload, only one will be set in any
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  561) 	// instance, which is set depends on the Message.Code.
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  562) =======
968e504edd (piersy            2021-07-12 12:38:02 +0100  563) 	// The below fields are the potential inner message instances only one
968e504edd (piersy            2021-07-12 12:38:02 +0100  564) 	// should be set for a message instance. These fields are not rlp
968e504edd (piersy            2021-07-12 12:38:02 +0100  565) 	// serializable since they are private. They are set when calling
968e504edd (piersy            2021-07-12 12:38:02 +0100  566) 	// Message.FromPayload, or at message construction time.
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  567) >>>>>>> master
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  568) 	committedSubject    *CommittedSubject
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  569) 	prePrepare          *Preprepare
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  570) 	prepare             *Subject
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  571) 	roundChange         *RoundChange
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  572) 	queryEnode          *QueryEnodeData
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  573) 	forwardMessage      *ForwardMessage
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  574) 	enodeCertificate    *EnodeCertificate
adb156fd1b (Piers Powlesland  2021-05-07 13:13:11 +0100  575) 	versionCertificates []*VersionCertificate
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  576) 	valEnodeShareData   *ValEnodesShareData
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  577) <<<<<<< HEAD
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  578) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  579) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  580) // NewMessage constructs a message with the innerMessage instance and the
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  581) // sender address, it will panic if innerMessage is not a recognised inner
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  582) // message type.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  583) func NewMessage(innerMessage interface{}, sender common.Address) *Message {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  584) 	message := &Message{
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  585) 		Address: sender,
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  586) 	}
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  587) 	switch t := innerMessage.(type) {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  588) 	case *Preprepare:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  589) 		message.Code = MsgPreprepare
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  590) 		message.prePrepare = t
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  591) 	case *Subject:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  592) 		message.Code = MsgPrepare
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  593) 		message.prepare = t
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  594) 	case *CommittedSubject:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  595) 		message.Code = MsgCommit
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  596) 		message.committedSubject = t
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  597) 	case *RoundChange:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  598) 		message.Code = MsgRoundChange
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  599) 		message.roundChange = t
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  600) 	case *QueryEnodeData:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  601) 		message.Code = QueryEnodeMsg
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  602) 		message.queryEnode = t
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  603) 	case *ForwardMessage:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  604) 		message.Code = FwdMsg
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  605) 		message.forwardMessage = t
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  606) 	case *EnodeCertificate:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  607) 		message.Code = EnodeCertificateMsg
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  608) 		message.enodeCertificate = t
adb156fd1b (Piers Powlesland  2021-05-07 13:13:11 +0100  609) 	case []*VersionCertificate:
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  610) 		message.Code = VersionCertificatesMsg
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  611) 		message.versionCertificates = t
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  612) 	case *ValEnodesShareData:
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  613) 		message.Code = ValEnodesShareMsg
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  614) 		message.valEnodeShareData = t
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  615) 	default:
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  616) 		panic(fmt.Sprintf("attempt to construct Message unrecognised inner message type %T", t))
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  617) 	}
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  618) 	bytes, err := rlp.EncodeToBytes(innerMessage)
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  619) 	if err != nil {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  620) 		panic(fmt.Sprintf("attempt to serialise inner messgae of type %T failed", innerMessage))
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  621) 	}
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  622) 	message.Msg = bytes
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  623) 	return message
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  624) =======
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  625) >>>>>>> master
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  626) }
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  627) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  628) // setMessageBytes sets the Msg field of msg to the rlp serialised bytes of
968e504edd (piersy            2021-07-12 12:38:02 +0100  629) // innerMessage. If innerMessage fails serialisation then this function
968e504edd (piersy            2021-07-12 12:38:02 +0100  630) // panics. This is intended for use by NewXXXMessage constructors only.
968e504edd (piersy            2021-07-12 12:38:02 +0100  631) func setMessageBytes(msg *Message, innerMessage interface{}) {
968e504edd (piersy            2021-07-12 12:38:02 +0100  632) 	bytes, err := rlp.EncodeToBytes(innerMessage)
968e504edd (piersy            2021-07-12 12:38:02 +0100  633) 	if err != nil {
968e504edd (piersy            2021-07-12 12:38:02 +0100  634) 		panic(fmt.Sprintf("attempt to serialise inner message of type %T failed", innerMessage))
968e504edd (piersy            2021-07-12 12:38:02 +0100  635) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  636) 	msg.Msg = bytes
968e504edd (piersy            2021-07-12 12:38:02 +0100  637) }
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  638) 
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  639) func (m *Message) Sign(signingFn func(data []byte) ([]byte, error)) error {
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  640) 	// Construct and encode a message with no signature
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  641) 	payloadNoSig, err := m.PayloadNoSig()
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  642) 	if err != nil {
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  643) 		return err
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  644) 	}
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  645) 	m.Signature, err = signingFn(payloadNoSig)
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  646) 	return err
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  647) }
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  648) 
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  649) func (m *Message) DecodeRLP(stream *rlp.Stream) error {
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  650) 	type decodable Message
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  651) 	var d decodable
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  652) 	err := stream.Decode(&d)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  653) 	if err != nil {
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  654) 		return err
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  655) 	}
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  656) 	*m = Message(d)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  657) 
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  658) 	if len(m.Msg) == 0 && len(m.Signature) == 0 {
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  659) 		// Empty validator handshake message
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  660) 		return nil
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  661) 	}
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  662) 
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  663) 	switch m.Code {
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  664) 	case MsgPreprepare:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  665) 		var p *Preprepare
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  666) 		err = m.decode(&p)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  667) 		if err != nil {
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  668) 			return err
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  669) 		}
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  670) 		m.prePrepare = p
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  671) 	case MsgPrepare:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  672) 		var p *Subject
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  673) 		err = m.decode(&p)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  674) 		m.prepare = p
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  675) 	case MsgCommit:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  676) 		var cs *CommittedSubject
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  677) 		err = m.decode(&cs)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  678) 		m.committedSubject = cs
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  679) 	case MsgRoundChange:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  680) 		var p *RoundChange
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  681) 		err = m.decode(&p)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  682) 		if err != nil {
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  683) 			return err
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  684) 		}
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  685) 		m.roundChange = p
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  686) 	case QueryEnodeMsg:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  687) 		var q *QueryEnodeData
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  688) 		err = m.decode(&q)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  689) 		m.queryEnode = q
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  690) 	case FwdMsg:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  691) 		var f *ForwardMessage
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  692) 		err = m.decode(&f)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  693) 		m.forwardMessage = f
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  694) 	case EnodeCertificateMsg:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  695) 		var e *EnodeCertificate
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  696) 		err = m.decode(&e)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  697) 		m.enodeCertificate = e
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  698) 	case VersionCertificatesMsg:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  699) 		var v []*VersionCertificate
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  700) 		err = m.decode(&v)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  701) 		m.versionCertificates = v
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  702) 	case ValEnodesShareMsg:
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  703) 		var v *ValEnodesShareData
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  704) 		err = m.decode(&v)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  705) 		m.valEnodeShareData = v
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  706) 	default:
a9b249cbf7 (Piers Powlesland  2021-05-11 11:34:30 +0100  707) 		err = fmt.Errorf("unrecognised message code %d", m.Code)
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  708) 	}
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  709) 	return err
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  710) 
1d2eae7a96 (Piers Powlesland  2021-05-11 10:31:13 +0100  711) }
6143c8bf14 (Piers Powlesland  2021-05-11 10:21:24 +0100  712) 
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  713) // FromPayload decodes b into a Message instance it will set one of the private
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  714) // fields committedSubject, prePrepare, prepare or roundChange depending on the
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  715) // type of the message.
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  716) func (m *Message) FromPayload(b []byte, validateFn func([]byte, []byte) (common.Address, error)) error {
0344742015 (Joshua Gutow      2019-09-23 17:14:05 -0700  717) 	// Decode Message
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  718) 	err := rlp.DecodeBytes(b, &m)
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  719) 	if err != nil {
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  720) 		return err
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  721) 	}
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  722) 
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  723) 	// Validate message (on a message without Signature)
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  724) 	if validateFn != nil {
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  725) 		var payload []byte
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  726) 		payload, err = m.PayloadNoSig()
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  727) 		if err != nil {
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  728) 			return err
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  729) 		}
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  730) 
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  731) 		signed_val_addr, err := validateFn(payload, m.Signature)
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  732) 		if err != nil {
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  733) 			return err
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  734) 		}
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  735) 		if signed_val_addr != m.Address {
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  736) 			return ErrInvalidSigner
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  737) 		}
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  738) 	}
ebc9761dec (Tim Moreton       2019-09-24 14:00:51 -0700  739) 	return nil
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  740) }
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  741) 
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  742) func (m *Message) Payload() ([]byte, error) {
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  743) 	return rlp.EncodeToBytes(m)
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  744) }
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  745) 
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  746) func (m *Message) PayloadNoSig() ([]byte, error) {
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  747) 	return rlp.EncodeToBytes(&Message{
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  748) 		Code:      m.Code,
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  749) 		Msg:       m.Msg,
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  750) 		Address:   m.Address,
046fabe131 (Kevin Jue         2019-11-19 20:42:25 -0800  751) 		Signature: []byte{},
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  752) 	})
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  753) }
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  754) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  755) func (m *Message) decode(val interface{}) error {
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  756) 	return rlp.DecodeBytes(m.Msg, val)
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  757) }
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  758) 
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  759) func (m *Message) String() string {
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  760) 	return fmt.Sprintf("{Code: %v, Address: %v}", m.Code, m.Address.String())
9cba929b84 (Joshua Gutow      2019-09-03 15:17:51 -0700  761) }
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  762) 
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  763) // Commit returns the committed subject if this is a commit message.
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  764) func (m *Message) Commit() *CommittedSubject {
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  765) 	return m.committedSubject
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  766) }
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  767) 
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  768) // Preprepare returns preprepare if this is a preprepare message.
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  769) func (m *Message) Preprepare() *Preprepare {
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  770) 	return m.prePrepare
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  771) }
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  772) 
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  773) // Prepare returns prepare if this is a prepare message.
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  774) func (m *Message) Prepare() *Subject {
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  775) 	return m.prepare
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  776) }
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  777) 
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  778) // Prepare returns round change if this is a round change message.
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  779) func (m *Message) RoundChange() *RoundChange {
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  780) 	return m.roundChange
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  781) }
3aa510614d (Piers Powlesland  2021-04-27 20:48:21 +0100  782) 
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  783) // QueryEnode returns query enode data if this is a query enode message.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  784) func (m *Message) QueryEnodeMsg() *QueryEnodeData {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  785) 	return m.queryEnode
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  786) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  787) 
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  788) // ForwardMessage returns forward message if this is a forward message.
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  789) func (m *Message) ForwardMessage() *ForwardMessage {
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  790) 	return m.forwardMessage
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  791) }
d0d47e2e2a (Piers Powlesland  2021-04-29 21:36:41 +0100  792) 
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  793) // EnodeCertificate returns the enode certificate if this is an enode
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  794) // certificate message
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  795) func (m *Message) EnodeCertificate() *EnodeCertificate {
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  796) 	return m.enodeCertificate
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  797) }
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  798) 
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  799) // VersionCertificates returns the version certificate entries if this is a
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  800) // version certificates message.
adb156fd1b (Piers Powlesland  2021-05-07 13:13:11 +0100  801) func (m *Message) VersionCertificates() []*VersionCertificate {
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  802) 	return m.versionCertificates
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  803) }
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  804) 
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  805) // ValEnodesShareData returns val enode share data if this is a val enodes share message.
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  806) func (m *Message) ValEnodesShareData() *ValEnodesShareData {
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  807) 	return m.valEnodeShareData
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  808) }
d0e06f56ae (Piers Powlesland  2021-05-06 21:02:00 +0100  809) 
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  810) func (m *Message) Copy() *Message {
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  811) 	return &Message{
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  812) 		Code:      m.Code,
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  813) 		Msg:       append(m.Msg[:0:0], m.Msg...),
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  814) 		Address:   m.Address,
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  815) 		Signature: append(m.Signature[:0:0], m.Signature...),
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  816) 	}
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  817) }
aa488e91b4 (Trevor Porter     2020-03-13 19:37:15 +0100  818) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  819) // MapMessagesToSenders map a list of Messages to the list of the sender addresses
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  820) func MapMessagesToSenders(messages []Message) []common.Address {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  821) 	returnList := make([]common.Address, len(messages))
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  822) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  823) 	for i, ms := range messages {
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  824) 		returnList[i] = ms.Address
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  825) 	}
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  826) 
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  827) 	return returnList
c234c8f820 (Mariano Cortesi   2020-01-09 21:48:53 -0300  828) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  829) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  830) // ## EnodeCertificate ######################################################################
968e504edd (piersy            2021-07-12 12:38:02 +0100  831) 
968e504edd (piersy            2021-07-12 12:38:02 +0100  832) // NewValEnodesShareMessage constructs a Message instance with the given sender
968e504edd (piersy            2021-07-12 12:38:02 +0100  833) // and enodeCertificate. Both the enodeCertificate instance and the serialized
968e504edd (piersy            2021-07-12 12:38:02 +0100  834) // bytes of enodeCertificate are part of the returned Message.
968e504edd (piersy            2021-07-12 12:38:02 +0100  835) func NewEnodeCeritifcateMessage(enodeCertificate *EnodeCertificate, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  836) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  837) 		Address:          sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  838) 		Code:             EnodeCertificateMsg,
968e504edd (piersy            2021-07-12 12:38:02 +0100  839) 		enodeCertificate: enodeCertificate,
968e504edd (piersy            2021-07-12 12:38:02 +0100  840) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100  841) 	setMessageBytes(message, enodeCertificate)
968e504edd (piersy            2021-07-12 12:38:02 +0100  842) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100  843) }
968e504edd (piersy            2021-07-12 12:38:02 +0100  844) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  845) type EnodeCertificate struct {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  846) 	EnodeURL string
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  847) 	Version  uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  848) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  849) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  850) // EncodeRLP serializes ec into the Ethereum RLP format.
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  851) func (ec *EnodeCertificate) EncodeRLP(w io.Writer) error {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  852) 	return rlp.Encode(w, []interface{}{ec.EnodeURL, ec.Version})
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  853) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  854) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  855) // DecodeRLP implements rlp.Decoder, and load the ec fields from a RLP stream.
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  856) func (ec *EnodeCertificate) DecodeRLP(s *rlp.Stream) error {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  857) 	var msg struct {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  858) 		EnodeURL string
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  859) 		Version  uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  860) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  861) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  862) 	if err := s.Decode(&msg); err != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  863) 		return err
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  864) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  865) 	ec.EnodeURL, ec.Version = msg.EnodeURL, msg.Version
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  866) 	return nil
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  867) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  868) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  869) // ## EnodeCertMsg ######################################################################
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  870) type EnodeCertMsg struct {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  871) 	Msg           *Message
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  872) 	DestAddresses []common.Address
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  873) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  874) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  875) // ## AddressEntry ######################################################################
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  876) // AddressEntry is an entry for the valEnodeTable.
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  877) type AddressEntry struct {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  878) 	Address                      common.Address
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  879) 	PublicKey                    *ecdsa.PublicKey
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  880) 	Node                         *enode.Node
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  881) 	Version                      uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  882) 	HighestKnownVersion          uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  883) 	NumQueryAttemptsForHKVersion uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  884) 	LastQueryTimestamp           *time.Time
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  885) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  886) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  887) func (ae *AddressEntry) String() string {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  888) 	var nodeString string
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  889) 	if ae.Node != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  890) 		nodeString = ae.Node.String()
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  891) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  892) 	return fmt.Sprintf("{address: %v, enodeURL: %v, version: %v, highestKnownVersion: %v, numQueryAttempsForHKVersion: %v, LastQueryTimestamp: %v}", ae.Address.String(), nodeString, ae.Version, ae.HighestKnownVersion, ae.NumQueryAttemptsForHKVersion, ae.LastQueryTimestamp)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  893) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  894) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  895) // Implement RLP Encode/Decode interface
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  896) type AddressEntryRLP struct {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  897) 	Address                      common.Address
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  898) 	CompressedPublicKey          []byte
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  899) 	EnodeURL                     string
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  900) 	Version                      uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  901) 	HighestKnownVersion          uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  902) 	NumQueryAttemptsForHKVersion uint
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  903) 	LastQueryTimestamp           []byte
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  904) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  905) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  906) // EncodeRLP serializes AddressEntry into the Ethereum RLP format.
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  907) func (ae *AddressEntry) EncodeRLP(w io.Writer) error {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  908) 	var nodeString string
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  909) 	if ae.Node != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  910) 		nodeString = ae.Node.String()
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  911) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  912) 	var publicKeyBytes []byte
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  913) 	if ae.PublicKey != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  914) 		publicKeyBytes = crypto.CompressPubkey(ae.PublicKey)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  915) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  916) 	var lastQueryTimestampBytes []byte
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  917) 	if ae.LastQueryTimestamp != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  918) 		var err error
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  919) 		lastQueryTimestampBytes, err = ae.LastQueryTimestamp.MarshalBinary()
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  920) 		if err != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  921) 			return err
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  922) 		}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  923) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  924) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  925) 	return rlp.Encode(w, AddressEntryRLP{Address: ae.Address,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  926) 		CompressedPublicKey:          publicKeyBytes,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  927) 		EnodeURL:                     nodeString,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  928) 		Version:                      ae.Version,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  929) 		HighestKnownVersion:          ae.HighestKnownVersion,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  930) 		NumQueryAttemptsForHKVersion: ae.NumQueryAttemptsForHKVersion,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  931) 		LastQueryTimestamp:           lastQueryTimestampBytes})
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  932) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  933) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  934) // DecodeRLP implements rlp.Decoder, and load the AddressEntry fields from a RLP stream.
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  935) func (ae *AddressEntry) DecodeRLP(s *rlp.Stream) error {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  936) 	var entry AddressEntryRLP
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  937) 	var err error
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  938) 	if err := s.Decode(&entry); err != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  939) 		return err
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  940) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  941) 	var node *enode.Node
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  942) 	if len(entry.EnodeURL) > 0 {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  943) 		node, err = enode.ParseV4(entry.EnodeURL)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  944) 		if err != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  945) 			return err
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  946) 		}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  947) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  948) 	var publicKey *ecdsa.PublicKey
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  949) 	if len(entry.CompressedPublicKey) > 0 {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  950) 		publicKey, err = crypto.DecompressPubkey(entry.CompressedPublicKey)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  951) 		if err != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  952) 			return err
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  953) 		}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  954) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  955) 	lastQueryTimestamp := &time.Time{}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  956) 	if len(entry.LastQueryTimestamp) > 0 {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  957) 		err := lastQueryTimestamp.UnmarshalBinary(entry.LastQueryTimestamp)
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  958) 		if err != nil {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  959) 			return err
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  960) 		}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  961) 	}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  962) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  963) 	*ae = AddressEntry{Address: entry.Address,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  964) 		PublicKey:                    publicKey,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  965) 		Node:                         node,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  966) 		Version:                      entry.Version,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  967) 		HighestKnownVersion:          entry.HighestKnownVersion,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  968) 		NumQueryAttemptsForHKVersion: entry.NumQueryAttemptsForHKVersion,
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  969) 		LastQueryTimestamp:           lastQueryTimestamp}
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  970) 	return nil
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  971) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  972) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  973) // GetNode returns the address entry's node
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  974) func (ae *AddressEntry) GetNode() *enode.Node {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  975) 	return ae.Node
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  976) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  977) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  978) // GetVersion returns the addess entry's version
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  979) func (ae *AddressEntry) GetVersion() uint {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  980) 	return ae.Version
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  981) }
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  982) 
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  983) // GetAddess returns the addess entry's address
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  984) func (ae *AddressEntry) GetAddress() common.Address {
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  985) 	return ae.Address
4104d39a9b (Kevin Jue         2020-10-26 18:28:55 -0700  986) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100  987) 
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100  988) // ## VersionCertificate ######################################################################
adb156fd1b (Piers Powlesland  2021-05-07 13:13:11 +0100  989) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  990) <<<<<<< HEAD
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500  991) =======
968e504edd (piersy            2021-07-12 12:38:02 +0100  992) // NewVersionCeritifcatesMessage constructs a Message instance with the given sender
968e504edd (piersy            2021-07-12 12:38:02 +0100  993) // and versionCertificates. Both the versionCertificates instance and the serialized
968e504edd (piersy            2021-07-12 12:38:02 +0100  994) // bytes of versionCertificates are part of the returned Message.
968e504edd (piersy            2021-07-12 12:38:02 +0100  995) func NewVersionCeritifcatesMessage(versionCertificates []*VersionCertificate, sender common.Address) *Message {
968e504edd (piersy            2021-07-12 12:38:02 +0100  996) 	message := &Message{
968e504edd (piersy            2021-07-12 12:38:02 +0100  997) 		Address:             sender,
968e504edd (piersy            2021-07-12 12:38:02 +0100  998) 		Code:                VersionCertificatesMsg,
968e504edd (piersy            2021-07-12 12:38:02 +0100  999) 		versionCertificates: versionCertificates,
968e504edd (piersy            2021-07-12 12:38:02 +0100 1000) 	}
968e504edd (piersy            2021-07-12 12:38:02 +0100 1001) 	setMessageBytes(message, versionCertificates)
968e504edd (piersy            2021-07-12 12:38:02 +0100 1002) 	return message
968e504edd (piersy            2021-07-12 12:38:02 +0100 1003) }
968e504edd (piersy            2021-07-12 12:38:02 +0100 1004) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1005) >>>>>>> master
adb156fd1b (Piers Powlesland  2021-05-07 13:13:11 +0100 1006) // VersionCertificate is an entry in the VersionCertificateDB.
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1007) // It's a signed message from a registered or active validator indicating
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1008) // the most recent version of its enode.
adb156fd1b (Piers Powlesland  2021-05-07 13:13:11 +0100 1009) type VersionCertificate struct {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1010) 	Version   uint
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1011) 	Signature []byte
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1012) 	address   common.Address
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1013) 	pubKey    *ecdsa.PublicKey
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1014) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1015) 
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1016) <<<<<<< HEAD
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1017) =======
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1018) // NewVersionCeritifcate constructs a VersionCertificate instance with the
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1019) // given version.  It uses the signingFn to generate a version signature and
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1020) // then builds a version certificate from the version and its signature.
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1021) >>>>>>> master
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1022) func NewVersionCertificate(version uint, signingFn func([]byte) ([]byte, error)) (*VersionCertificate, error) {
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1023) 	vc := &VersionCertificate{Version: version}
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1024) 	payloadToSign, err := vc.signaturePayload()
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1025) 	if err != nil {
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1026) 		return nil, err
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1027) 	}
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1028) 	vc.Signature, err = signingFn(payloadToSign)
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1029) 	if err != nil {
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1030) 		return nil, err
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1031) 	}
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1032) <<<<<<< HEAD
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1033) 	return vc, vc.recoverAddressAndPubKey()
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1034) =======
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1035) 	err = vc.recoverAddressAndPubKey()
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1036) 	if err != nil {
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1037) 		return nil, err
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1038) 	}
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1039) 
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1040) 	return vc, nil
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1041) }
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1042) 
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1043) // NewVersionCeritifcateFrom fields constructs a VersionCertificate instance
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1044) // with the given fields, using them to build a VersionCertificate instance.
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1045) // No validation is done on the provided fields. It
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1046) // is assumed that the fields are valid, meaning that the signature was
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1047) // generated using the given version and the private part of the given public
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1048) // key, and also that the address corresponds to the given public key.
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1049) func NewVersionCertificateFromFields(version uint, signature []byte, address common.Address, key *ecdsa.PublicKey) *VersionCertificate {
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1050) 	return &VersionCertificate{
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1051) 		Version:   version,
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1052) 		Signature: signature,
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1053) 		address:   address,
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1054) 		pubKey:    key,
e7edbe3e23 (piersy            2021-07-15 12:41:32 +0100 1055) 	}
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1056) >>>>>>> master
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1057) }
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1058) 
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1059) // Used as a salt when signing versionCertificate. This is to account for
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1060) // the unlikely case where a different signed struct with the same field types
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1061) // is used elsewhere and shared with other nodes. If that were to happen, a
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1062) // malicious node could try sending the other struct where this struct is used,
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1063) // or vice versa. This ensures that the signature is only valid for this struct.
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1064) var versionCertificateSalt = []byte("versionCertificate")
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1065) 
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1066) func (vc *VersionCertificate) signaturePayload() ([]byte, error) {
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1067) 	return rlp.EncodeToBytes([]interface{}{versionCertificateSalt, vc.Version})
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1068) }
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1069) 
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1070) func (vc *VersionCertificate) Address() common.Address {
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1071) 	return vc.address
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1072) }
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1073) 
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1074) func (vc *VersionCertificate) PublicKey() *ecdsa.PublicKey {
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1075) 	return vc.pubKey
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1076) }
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1077) 
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1078) func (vc *VersionCertificate) String() string {
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1079) 	return fmt.Sprintf("%d", vc.Version)
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1080) }
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1081) 
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1082) func (vc *VersionCertificate) DecodeRLP(s *rlp.Stream) error {
6143c8bf14 (Piers Powlesland  2021-05-11 10:21:24 +0100 1083) 	// Create separate type to avoid stack overflow when calling Decode
6143c8bf14 (Piers Powlesland  2021-05-11 10:21:24 +0100 1084) 	type decodable VersionCertificate
6143c8bf14 (Piers Powlesland  2021-05-11 10:21:24 +0100 1085) 	var d decodable
6143c8bf14 (Piers Powlesland  2021-05-11 10:21:24 +0100 1086) 	if err := s.Decode(&d); err != nil {
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1087) 		return err
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1088) 	}
6143c8bf14 (Piers Powlesland  2021-05-11 10:21:24 +0100 1089) 	// copy struct data
6143c8bf14 (Piers Powlesland  2021-05-11 10:21:24 +0100 1090) 	*vc = VersionCertificate(d)
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1091) 
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1092) 	return vc.recoverAddressAndPubKey()
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1093) }
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1094) 
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1095) func (vc *VersionCertificate) recoverAddressAndPubKey() error {
d4d23d41e7 (Piers Powlesland  2021-05-10 09:56:55 +0100 1096) 	payloadToSign, err := vc.signaturePayload()
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1097) 	if err != nil {
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1098) 		return err
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1099) 	}
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1100) 	payloadHash := crypto.Keccak256(payloadToSign)
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1101) 	vc.pubKey, err = crypto.SigToPub(payloadHash, vc.Signature)
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1102) 	if err != nil {
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1103) 		return err
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1104) 	}
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1105) 	vc.address = crypto.PubkeyToAddress(*vc.pubKey)
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1106) 	return nil
82a6f9c9f4 (Piers Powlesland  2021-05-08 14:01:02 +0100 1107) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1108) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1109) // ## SharedValidatorEnode ######################################################################
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1110) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1111) type SharedValidatorEnode struct {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1112) 	Address  common.Address
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1113) 	EnodeURL string
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1114) 	Version  uint
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1115) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1116) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1117) type ValEnodesShareData struct {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1118) 	ValEnodes []SharedValidatorEnode
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1119) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1120) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1121) func (sve *SharedValidatorEnode) String() string {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1122) 	return fmt.Sprintf("{Address: %s, EnodeURL: %v, Version: %v}", sve.Address.Hex(), sve.EnodeURL, sve.Version)
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1123) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1124) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1125) func (sd *ValEnodesShareData) String() string {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1126) 	outputStr := "{ValEnodes:"
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1127) 	for _, valEnode := range sd.ValEnodes {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1128) 		outputStr = fmt.Sprintf("%s %s", outputStr, valEnode.String())
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1129) 	}
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1130) 	return fmt.Sprintf("%s}", outputStr)
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1131) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1132) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1133) // EncodeRLP serializes sd into the Ethereum RLP format.
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1134) func (sd *ValEnodesShareData) EncodeRLP(w io.Writer) error {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1135) 	return rlp.Encode(w, []interface{}{sd.ValEnodes})
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1136) }
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1137) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1138) // DecodeRLP implements rlp.Decoder, and load the sd fields from a RLP stream.
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1139) func (sd *ValEnodesShareData) DecodeRLP(s *rlp.Stream) error {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1140) 	var msg struct {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1141) 		ValEnodes []SharedValidatorEnode
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1142) 	}
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1143) 
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1144) 	if err := s.Decode(&msg); err != nil {
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1145) 		return err
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1146) 	}
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1147) 	sd.ValEnodes = msg.ValEnodes
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1148) 	return nil
ce4d79b275 (Piers Powlesland  2021-05-06 18:48:30 +0100 1149) }
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1150) <<<<<<< HEAD
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1151) =======
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1152) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1153) var (
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1154) 	// errInvalidSigningFn is returned when the consensus signing function is invalid.
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1155) 	errInvalidSigningFn = errors.New("invalid signing function for istanbul messages")
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1156) )
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1157) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1158) type EcdsaInfo struct {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1159) 	Address   common.Address   // Ethereum address of the ECDSA signing key
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1160) 	PublicKey *ecdsa.PublicKey // The signer public key
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1161) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1162) 	decrypt  DecryptFn    // Decrypt function to decrypt ECIES ciphertext
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1163) 	sign     SignerFn     // Signer function to authorize hashes with
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1164) 	signHash HashSignerFn // Signer function to create random seed
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1165) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1166) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1167) func NewEcdsaInfo(ecdsaAddress common.Address, publicKey *ecdsa.PublicKey,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1168) 	decryptFn DecryptFn, signFn SignerFn, signHashFn HashSignerFn) *EcdsaInfo {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1169) 	return &EcdsaInfo{
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1170) 		Address:   ecdsaAddress,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1171) 		PublicKey: publicKey,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1172) 		decrypt:   decryptFn,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1173) 		sign:      signFn,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1174) 		signHash:  signHashFn,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1175) 	}
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1176) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1177) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1178) // Sign hashes and signs the data with the ecdsa account
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1179) func (ei EcdsaInfo) Sign(data []byte) ([]byte, error) {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1180) 	if ei.sign == nil {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1181) 		return nil, errInvalidSigningFn
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1182) 	}
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1183) 	return ei.sign(accounts.Account{Address: ei.Address}, accounts.MimetypeIstanbul, data)
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1184) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1185) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1186) // SignHash signs the given hash with the ecdsa account
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1187) func (ei EcdsaInfo) SignHash(hash common.Hash) ([]byte, error) {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1188) 	return ei.signHash(accounts.Account{Address: ei.Address}, hash.Bytes())
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1189) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1190) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1191) // Decrypt is a decrypt callback function to request an ECIES ciphertext to be
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1192) // decrypted
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1193) func (ei EcdsaInfo) Decrypt(payload []byte) ([]byte, error) {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1194) 	return ei.decrypt(accounts.Account{Address: ei.Address}, payload, nil, nil)
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1195) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1196) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1197) type BlsInfo struct {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1198) 	Address common.Address // Ethereum address of the BLS signing key
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1199) 	sign    BLSSignerFn    // Signer function to authorize BLS messages
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1200) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1201) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1202) func NewBlsInfo(blsAddress common.Address, signBLSFn BLSSignerFn) *BlsInfo {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1203) 	return &BlsInfo{
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1204) 		Address: blsAddress,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1205) 		sign:    signBLSFn,
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1206) 	}
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1207) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1208) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1209) // Sign signs with the bls account
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1210) func (bi *BlsInfo) Sign(data []byte, extra []byte, useComposite, cip22 bool) (blscrypto.SerializedSignature, error) {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1211) 	if bi.sign == nil {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1212) 		return blscrypto.SerializedSignature{}, errInvalidSigningFn
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1213) 	}
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1214) 	return bi.sign(accounts.Account{Address: bi.Address}, data, extra, useComposite, cip22)
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1215) }
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1216) 
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1217) type Wallets struct {
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1218) 	Ecdsa EcdsaInfo
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1219) 	Bls   BlsInfo
51b05c9446 (hbandura          2022-01-04 19:57:04 -0300 1220) }
0000000000 (Not Committed Yet 2022-08-03 16:54:37 -0500 1221) >>>>>>> master
